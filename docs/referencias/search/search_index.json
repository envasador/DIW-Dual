{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dise\u00f1o de Interfaces Web","text":"<p>Dise\u00f1o de Interfaces Web dentro del ciclo de Desarrollo de Aplicaciones Web se enfoca en capacitar a los estudiantes en la creaci\u00f3n de interfaces web eficaces, atractivas y accesibles, aplicando las mejores pr\u00e1cticas de dise\u00f1o y utilizando las tecnolog\u00edas actuales. Los objetivos se dividen en varios Resultados de Aprendizaje (RA), que cubren desde la planificaci\u00f3n inicial hasta la creaci\u00f3n de interfaces amigables y accesibles.</p> <p>El m\u00f3dulo se organiza en las siguientes unidades, que se actualizar\u00e1n a medida que avance el curso. Cada unidad incluye enlaces de referencia y recursos adicionales para facilitar tu aprendizaje:</p> <ul> <li>\u00d3rbita 1: Dise\u00f1ar para que funcione</li> </ul>"},{"location":"#referencias-web-generales","title":"Referencias web generales","text":"<p>El desarrollo de software est\u00e1 en constante evoluci\u00f3n, actualmente podemos observar como una avalancha de nuevas tendencias tecnol\u00f3gicas y metodolog\u00edas se va abriendo paso. Este es el motivo principal por el que la mayor parte de los apuntes proporcionados no son m\u00e1s que referencias web actuales a los temas que vamos a tratar.</p> <ul> <li>HTML5 by Manz</li> <li>SVG by Manz</li> <li>CSS by Manz</li> <li>FreeCodeCamp</li> <li>developer.mozilla.org</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/","title":"\u00d3rbita 1: Dise\u00f1ar para que funcione Introducci\u00f3n","text":""},{"location":"orbita1.0-disenar-para-que-funcione/#introduccion","title":"Introducci\u00f3n","text":"<p>El dise\u00f1o de interfaces no consiste en hacer algo \"bonito\", sino en facilitar que el usuario logre sus objetivos de manera clara, r\u00e1pida y sin fricciones. Esta \u00f3rbita se centra en el dise\u00f1o funcional: en pensar primero en tareas, flujos y estructura antes de aplicar cualquier decisi\u00f3n visual.</p> <p>La interfaz es el puente entre el usuario y el sistema. Si ese puente est\u00e1 mal dise\u00f1ado, el usuario se pierde, se frustra o abandona. Por eso, antes de decidir colores o tipograf\u00edas, debemos entender para qu\u00e9 sirve la interfaz, qu\u00e9 necesita el usuario, y c\u00f3mo debe estar organizada la informaci\u00f3n.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#1-ux-primero-ui-despues-pensar-en-funcionalidad","title":"1. UX primero, UI despu\u00e9s: pensar en funcionalidad","text":"<p>En el mundo del dise\u00f1o web y de interfaces, es muy f\u00e1cil dejarse llevar por lo visual. Muchas veces empezamos un proyecto pensando en el logo, los colores corporativos o los estilos tipogr\u00e1ficos. Pero esta no es la forma m\u00e1s eficaz de construir una interfaz que realmente funcione.</p> <p>El punto de partida siempre debe ser la funcionalidad: entender al usuario, identificar qu\u00e9 tareas necesita realizar, y dise\u00f1ar una estructura que le permita lograr su objetivo sin frustraci\u00f3n. Esto es lo que diferencia una interfaz atractiva pero in\u00fatil de una interfaz efectiva.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-la-ux-y-en-que-se-diferencia-de-la-ui","title":"\u00bfQu\u00e9 es la UX y en qu\u00e9 se diferencia de la UI?","text":"<ul> <li> <p>UX (User Experience) es la experiencia completa que tiene una persona al interactuar con una app, web o sistema. Abarca desde la l\u00f3gica de navegaci\u00f3n hasta c\u00f3mo se siente al usarla: \u00bfes f\u00e1cil?, \u00bfconsigue lo que busca?, \u00bfse siente frustrado o satisfecho?</p> </li> <li> <p>UI (User Interface) es el aspecto visual de la interfaz: botones, colores, iconos, tipograf\u00eda, animaciones... Es la parte \u201cvisible\u201d, pero no debe determinar el funcionamiento, sino estar al servicio del mismo.</p> </li> </ul> <p>Pensar primero en la UX significa dise\u00f1ar desde las tareas, no desde los colores. Significa analizar qu\u00e9 necesita hacer el usuario y en qu\u00e9 orden, antes de decidir c\u00f3mo se ver\u00e1 cada pantalla.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#las-leyes-de-ux-principios-para-un-diseno-funcional","title":"Las leyes de UX: principios para un dise\u00f1o funcional","text":"<p>Los profesionales del dise\u00f1o de experiencia de usuario trabajan apoy\u00e1ndose en principios basados en la psicolog\u00eda y el comportamiento humano. Estas leyes de UX nos ayudan a dise\u00f1ar con m\u00e1s criterio. Aqu\u00ed tienes algunas fundamentales:</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#1-ley-de-hick","title":"1. Ley de Hick","text":"<p>Cuantas m\u00e1s opciones tiene una persona, m\u00e1s tarda en decidir.</p> <p>Por eso es mejor simplificar. No muestres 12 botones cuando el usuario solo necesita 3. Un men\u00fa corto es m\u00e1s efectivo que uno con 15 categor\u00edas.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#2-ley-de-fitts","title":"2. Ley de Fitts","text":"<p>El tiempo que se tarda en alcanzar un objetivo depende de su tama\u00f1o y cercan\u00eda.</p> <p>En dispositivos m\u00f3viles, los botones m\u00e1s usados deben ser grandes y estar al alcance del pulgar. No escondas funciones clave en esquinas lejanas.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#3-ley-de-jakob","title":"3. Ley de Jakob","text":"<p>Las personas esperan que tu web/app funcione como las que ya conocen.</p> <p>Esto no es malo: aprovecha los patrones familiares. Si un icono de carrito siempre est\u00e1 arriba a la derecha, no lo pongas en el pie de p\u00e1gina sin motivo.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#4-ley-de-tesler-ley-de-la-complejidad","title":"4. Ley de Tesler (Ley de la complejidad)","text":"<p>Cada sistema tiene una complejidad m\u00ednima. Si no la gestiona el dise\u00f1ador, la asume el usuario.</p> <p>Simplificar no es eliminar opciones, sino organizar bien la complejidad: agrupando, mostrando por pasos o usando asistentes.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#5-ley-de-miller","title":"5. Ley de Miller","text":"<p>El cerebro humano s\u00f3lo puede procesar entre 5 y 9 elementos a la vez.</p> <p>Si en una pantalla hay m\u00e1s de 9 cosas \u201cgritando\u201d, el usuario se bloquea. Usa jerarqu\u00eda, espacios, agrupaciones y orden l\u00f3gico.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#_1","title":"\u00d3rbita 1: Dise\u00f1ar para que funcione Introducci\u00f3n","text":""},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-app-de-comida-a-domicilio","title":"Ejemplo pr\u00e1ctico: app de comida a domicilio","text":"<p>Imaginemos que vamos a dise\u00f1ar una aplicaci\u00f3n de comida a domicilio similar a Glovo o Just Eat. En este tipo de apps, el objetivo del usuario es claro: pedir comida de forma r\u00e1pida, c\u00f3moda y segura. Pero \u00bfc\u00f3mo se traduce eso en pantallas funcionales? Para hacerlo bien, necesitamos pensar en t\u00e9rminos de experiencia de usuario y responder a una serie de preguntas clave.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-lo-primero-que-necesita-hacer-el-usuario-al-entrar","title":"\u00bfQu\u00e9 es lo primero que necesita hacer el usuario al entrar?","text":"<p>Lo m\u00e1s probable es que quiera ver qu\u00e9 restaurantes tiene disponibles cerca. Por tanto, lo primero deber\u00eda ser introducir su direcci\u00f3n o permitir la geolocalizaci\u00f3n. Si esa informaci\u00f3n ya est\u00e1 guardada, puede pasar directamente al listado de restaurantes.</p> <p>Funcionalidad recomendada: una pantalla inicial con buscador de direcci\u00f3n o bot\u00f3n de \u201cUsar mi ubicaci\u00f3n\u201d.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#debe-buscar-un-restaurante-o-iniciar-sesion","title":"\u00bfDebe buscar un restaurante, o iniciar sesi\u00f3n?","text":"<p>No deber\u00eda ser obligatorio iniciar sesi\u00f3n para navegar y explorar opciones. Obligar al registro en el primer paso genera fricci\u00f3n. Es m\u00e1s recomendable dejarlo para el momento del pedido.</p> <p>Funcionalidad recomendada: navegaci\u00f3n libre por el cat\u00e1logo; la sesi\u00f3n solo se solicita al confirmar el pedido.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-se-muestra-la-informacion-del-producto","title":"\u00bfC\u00f3mo se muestra la informaci\u00f3n del producto?","text":"<p>Cuando un usuario entra en un restaurante, lo que necesita ver es el men\u00fa clasificado, con nombre, descripci\u00f3n, precio, imagen opcional y un bot\u00f3n para a\u00f1adir. No conviene mostrar demasiada informaci\u00f3n en bloque. Los platos deben estar organizados en categor\u00edas (entrantes, principales, postres...).</p> <p>Funcionalidad recomendada: men\u00fa estructurado con listas claras, elementos clicables y opci\u00f3n de a\u00f1adir al carrito directamente.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-se-simplifica-el-proceso-de-pago","title":"\u00bfC\u00f3mo se simplifica el proceso de pago?","text":"<p>El pago debe requerir el menor n\u00famero posible de pasos. Idealmente, se resume en una pantalla clara donde se pueda revisar el pedido, a\u00f1adir direcci\u00f3n si no estaba guardada, elegir m\u00e9todo de pago y confirmar.</p> <p>Funcionalidad recomendada: pantalla de revisi\u00f3n con totales, direcci\u00f3n editable, opciones de pago guardadas o r\u00e1pidas.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#donde-puede-consultar-su-pedido-actual","title":"\u00bfD\u00f3nde puede consultar su pedido actual?","text":"<p>El usuario debe tener acceso r\u00e1pido al estado de su pedido. Lo m\u00e1s habitual es incluir un icono fijo de carrito (en la parte superior) que lleve directamente a la pantalla del pedido.</p> <p>Funcionalidad recomendada: icono de carrito visible en todo momento, con n\u00famero de productos y acceso directo al resumen.</p> <p>Este tipo de an\u00e1lisis funcional es lo que permite construir una experiencia de usuario fluida, centrada en las tareas reales del usuario. El orden de los pasos, la visibilidad de la informaci\u00f3n y la simplicidad de las acciones son aspectos que definen una buena UX.</p> <p>Una vez est\u00e9 claro qu\u00e9 pantallas necesita el usuario, qu\u00e9 datos debe ver y c\u00f3mo fluye la navegaci\u00f3n entre ellas\u2026 entonces nos preocuparemos por los colores y la tipograf\u00eda.</p> <p>En resumen, el dise\u00f1o funcional es la base de todo buen dise\u00f1o de interfaz. Una buena experiencia de usuario es lo que hace que una app sea \u00fatil, clara y agradable. La interfaz visual debe servir a esa experiencia, no sustituirla ni taparla.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#enlaces-de-referencia","title":"Enlaces de referencia","text":"<ul> <li>Laws of UX \u2013 Colecci\u00f3n completa con ejemplos visuales</li> <li>UX Planet \u2013 Diferencia entre UX y UI</li> <li>NNGroup \u2013 What is User Experience?</li> <li>UX Collective \u2013 UX antes que UI</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cAnalizar y repensar la funcionalidad\u201d</p> <ol> <li>Divide al alumnado en peque\u00f1os grupos.</li> <li>Cada grupo elegir\u00e1 una app popular (puede ser Instagram, Amazon, Glovo, Duolingo...).</li> <li>Deben responder por escrito:</li> <li>\u00bfCu\u00e1l es el objetivo principal del usuario?</li> <li>\u00bfCu\u00e1les son los pasos que debe dar para lograrlo?</li> <li>\u00bfQu\u00e9 elementos visuales lo ayudan o lo entorpecen?</li> <li>\u00bfQu\u00e9 decisi\u00f3n de dise\u00f1o visual no tiene sentido desde el punto de vista funcional?</li> <li>Despu\u00e9s, cada grupo debe proponer una mejora funcional (no est\u00e9tica) que har\u00eda m\u00e1s f\u00e1cil o clara la experiencia del usuario.</li> </ol> <p>Esta actividad puede completarse con una puesta en com\u00fan o una presentaci\u00f3n breve por grupo.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#2-patrones-y-antipatrones-en-el-diseno-de-interfaces","title":"2. Patrones y antipatrones en el dise\u00f1o de interfaces","text":"<p>Cuando dise\u00f1amos interfaces, no empezamos desde cero. Existen soluciones que ya han demostrado funcionar bien porque los usuarios las reconocen y entienden con facilidad. A esas soluciones las llamamos patrones de dise\u00f1o. Un patr\u00f3n es una estructura o mecanismo que se repite en m\u00faltiples sistemas porque ha probado ser eficaz y comprensible.</p> <p>Por el contrario, a las malas soluciones \u2014aquellas que generan confusi\u00f3n, dificultan la interacci\u00f3n o rompen expectativas\u2014 las llamamos antipatrones. Detectarlos y evitarlos es tan importante como aplicar los patrones correctos.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-un-patron-de-diseno","title":"\u00bfQu\u00e9 es un patr\u00f3n de dise\u00f1o?","text":"<p>Un patr\u00f3n de dise\u00f1o es una soluci\u00f3n probada a un problema com\u00fan de interacci\u00f3n. No se trata de copiar dise\u00f1os visuales, sino de identificar estructuras funcionales que los usuarios ya conocen y que permiten lograr tareas de forma clara y r\u00e1pida.</p> <p>Por ejemplo, cuando entras en una tienda online y ves un carrito en la esquina superior derecha, sabes autom\u00e1ticamente que ah\u00ed puedes consultar tus productos. Cuando ves una lupa, sabes que es para buscar. Estos elementos son familiares porque responden a convenciones que todos hemos aprendido usando cientos de webs y apps.</p> <p>Utilizar patrones no es falta de originalidad: es una forma de respetar el tiempo, la atenci\u00f3n y las expectativas del usuario.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#algunos-patrones-frecuentes","title":"Algunos patrones frecuentes:","text":"<ul> <li>Men\u00fa de navegaci\u00f3n fijo en la parte superior</li> <li>Icono de hamburguesa para desplegar el men\u00fa en m\u00f3vil</li> <li>Carrito de compra visible con n\u00famero de art\u00edculos</li> <li>Cards o tarjetas con informaci\u00f3n agrupada (producto, noticia, perfil\u2026)</li> <li>Bot\u00f3n de acci\u00f3n principal destacado (como el bot\u00f3n azul de \u201cpublicar\u201d en redes)</li> <li>Sistema de pasos progresivos (checkout, formularios\u2026)</li> </ul> <p>Estos patrones no son normas cerradas, pero ayudan a construir una experiencia intuitiva.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-un-antipatron","title":"\u00bfQu\u00e9 es un antipatr\u00f3n?","text":"<p>Un antipatr\u00f3n es una soluci\u00f3n mal aplicada o inadecuada que provoca errores, malentendidos o fricciones en la experiencia del usuario. A menudo surgen por intentar ser \u201cdemasiado creativos\u201d sin pensar en las consecuencias.</p> <p>Los antipatrones rompen las expectativas del usuario, hacen que tenga que \u201cpensar demasiado\u201d o provocan errores evitables.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#algunos-ejemplos-de-antipatrones-comunes","title":"Algunos ejemplos de antipatrones comunes:","text":"<ul> <li>Usar solo placeholders sin etiquetas en los formularios: si desaparecen al escribir, el usuario olvida qu\u00e9 ten\u00eda que poner.</li> <li>Botones que parecen texto y no se distinguen como clicables.</li> <li>Formularios con errores ocultos o sin mensajes de validaci\u00f3n claros.</li> <li>Men\u00fas ocultos sin pistas visuales: el usuario no sabe c\u00f3mo navegar.</li> <li>Campos obligatorios que no est\u00e1n marcados como tales.</li> <li>Cambios bruscos de dise\u00f1o o comportamiento entre pantallas similares.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-detectar-y-aplicar-patrones-de-forma-consciente","title":"\u00bfC\u00f3mo detectar y aplicar patrones de forma consciente?","text":"<p>Aplicar patrones no significa copiar ciegamente otros productos. Significa entender qu\u00e9 quiere hacer el usuario y cu\u00e1l es la forma m\u00e1s clara de ayudarle a hacerlo. Un buen dise\u00f1ador es capaz de adaptar patrones al contexto concreto de su app.</p> <p>De la misma forma, evitar antipatrones exige observar cr\u00edticamente otros productos, probar las soluciones propias con usuarios reales y cuestionar si algo realmente funciona o solo \u201cparece bonito\u201d.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-de-referencia","title":"Recursos de referencia","text":"<p>Si quieres explorar colecciones reales de patrones y estudiar c\u00f3mo se aplican en apps y webs actuales, te recomiendo estos sitios:</p> <ul> <li>UI Patterns: recopilaci\u00f3n de patrones con explicaci\u00f3n de cu\u00e1ndo usarlos.</li> <li>Mobbin: biblioteca visual con miles de capturas de apps reales clasificadas por componentes.</li> <li>PageFlows: v\u00eddeos reales de flujos de usuario dentro de apps conocidas.</li> <li>Pttrns: ejemplos de interfaces m\u00f3viles organizadas por patrones.</li> <li>GoodUI: colecci\u00f3n de ideas de interfaz que han funcionado bien en tests reales.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase_1","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cCaza de patrones y antipatrones\u201d</p> <ol> <li>El alumnado visitar\u00e1 User Inyerface, una web intencionadamente mal dise\u00f1ada.</li> <li>En parejas o grupos, deben identificar al menos tres antipatrones que dificultan la interacci\u00f3n.</li> <li> <p>Por cada antipatr\u00f3n encontrado, deben explicar:</p> </li> <li> <p>Qu\u00e9 problema genera.</p> </li> <li>Por qu\u00e9 rompe con las expectativas del usuario.</li> <li>Qu\u00e9 patr\u00f3n correcto se podr\u00eda aplicar para resolverlo.</li> <li>Como complemento, pueden buscar dos patrones positivos en una app real que les guste (Spotify, TikTok, Airbnb, etc.) y explicar por qu\u00e9 funcionan.</li> </ol> <p>Con esta actividad nor permite desarrollar el pensamiento cr\u00edtico y aplicar conceptos de forma pr\u00e1ctica. Podemos cerrar con una puesta en com\u00fan o una galer\u00eda de ejemplos comentados en el aula. (dependiendo del tiempo que tengamos).</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#3-arquitectura-de-la-informacion-ordenar-para-entender","title":"3. Arquitectura de la informaci\u00f3n: ordenar para entender","text":"<p>Cuando una persona entra en una web o app, no espera tener que explorar a ciegas. Necesita encontrar lo que busca con rapidez y saber d\u00f3nde est\u00e1 en todo momento. Para que esto sea posible, el contenido debe estar bien estructurado. Esa estructura l\u00f3gica, jer\u00e1rquica y funcional es lo que llamamos arquitectura de la informaci\u00f3n (IA).</p> <p>Dise\u00f1ar una interfaz no es s\u00f3lo decidir c\u00f3mo se ve una pantalla, sino c\u00f3mo se relacionan entre s\u00ed las distintas pantallas, c\u00f3mo se agrupa el contenido y qu\u00e9 rutas puede seguir el usuario para llegar a su objetivo.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-exactamente-la-arquitectura-de-la-informacion","title":"\u00bfQu\u00e9 es exactamente la arquitectura de la informaci\u00f3n?","text":"<p>La arquitectura de la informaci\u00f3n es la disciplina que se encarga de organizar, etiquetar y jerarquizar los contenidos de un sistema para facilitar su uso y comprensi\u00f3n. Se aplica tanto a webs como a apps, e incluso a sistemas f\u00edsicos como museos o supermercados.</p> <p>En el dise\u00f1o web, la arquitectura de la informaci\u00f3n responde a preguntas como:</p> <ul> <li>\u00bfCu\u00e1ntas secciones principales hay?</li> <li>\u00bfQu\u00e9 subsecciones dependen de cada una?</li> <li>\u00bfD\u00f3nde colocamos ciertas funcionalidades o tipos de contenido?</li> <li>\u00bfQu\u00e9 estructura de navegaci\u00f3n es la m\u00e1s clara para este producto?</li> </ul> <p>Una buena arquitectura de la informaci\u00f3n no siempre se nota, pero una mala se sufre al instante: el usuario se pierde, no encuentra lo que busca o repite pasos innecesarios.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#elementos-clave-en-la-arquitectura-de-informacion","title":"Elementos clave en la arquitectura de informaci\u00f3n","text":"<p>Hay muchos recursos y t\u00e9cnicas que se usan para representar y planificar la arquitectura de la informaci\u00f3n de un producto digital. Algunos de los m\u00e1s habituales son:</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#1-mapa-de-navegacion-o-sitemap","title":"1. Mapa de navegaci\u00f3n o sitemap","text":"<p>Es un esquema que muestra c\u00f3mo se relacionan todas las pantallas o secciones. Permite ver de un vistazo la jerarqu\u00eda de contenidos. En Figma o Miro, se puede representar con cajas y l\u00edneas.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#2-agrupacion-por-categorias","title":"2. Agrupaci\u00f3n por categor\u00edas","text":"<p>El contenido debe estar organizado por bloques coherentes. Por ejemplo, en una app de viajes: \u201cvuelos\u201d, \u201choteles\u201d, \u201cactividades\u201d y \u201cmi cuenta\u201d. Si las categor\u00edas no est\u00e1n claras, el usuario se confunde.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#3-breadcrumbs-o-migas-de-pan","title":"3. Breadcrumbs o migas de pan","text":"<p>Permiten mostrar al usuario en qu\u00e9 punto exacto est\u00e1 dentro de la jerarqu\u00eda. Por ejemplo: Inicio &gt; Productos &gt; Electr\u00f3nica &gt; Port\u00e1tiles.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#4-menus-y-sistemas-de-navegacion","title":"4. Men\u00fas y sistemas de navegaci\u00f3n","text":"<p>La arquitectura tambi\u00e9n define c\u00f3mo se accede a cada secci\u00f3n: \u00bfdesde un men\u00fa lateral? \u00bfcon iconos inferiores? \u00bfmediante pesta\u00f1as?</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#principios-de-dan-brown-para-la-arquitectura-de-la-informacion","title":"Principios de Dan Brown para la Arquitectura de la Informaci\u00f3n.","text":"<p>El experto Dan Brown propuso siete principios que ayudan a construir una buena arquitectura de informaci\u00f3n:</p> <ol> <li>Objetividad: no dise\u00f1ar para nosotros, sino para el usuario.</li> <li>Organizaci\u00f3n: los elementos deben agruparse seg\u00fan su l\u00f3gica, no su est\u00e9tica.</li> <li>Navegabilidad: el usuario siempre debe saber d\u00f3nde est\u00e1 y c\u00f3mo volver.</li> <li>Contexto: cada secci\u00f3n debe tener sentido por s\u00ed misma.</li> <li>Trazabilidad: permitir al usuario seguir el rastro de su navegaci\u00f3n.</li> <li>Consistencia: usar el mismo tipo de estructura y lenguaje en todo el sistema.</li> <li>Econom\u00eda: no abrumar con opciones innecesarias; menos es m\u00e1s.</li> </ol>"},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-una-app-de-gestion-de-tareas","title":"Ejemplo pr\u00e1ctico: una app de gesti\u00f3n de tareas","text":"<p>Imaginemos una app que permite al usuario crear tareas, organizarlas por proyectos y hacer seguimiento del progreso.</p> <ul> <li>Las secciones principales podr\u00edan ser: \u201cInicio\u201d, \u201cProyectos\u201d, \u201cTareas\u201d, \u201cCalendario\u201d y \u201cCuenta\u201d.</li> <li>Dentro de \u201cProyectos\u201d habr\u00eda una lista de proyectos y, al entrar en uno, las tareas correspondientes.</li> <li>La navegaci\u00f3n incluir\u00eda un men\u00fa inferior con iconos y un bot\u00f3n flotante para crear una nueva tarea desde cualquier parte.</li> <li>El usuario deber\u00eda poder ver f\u00e1cilmente en qu\u00e9 proyecto est\u00e1 y volver atr\u00e1s sin perderse.</li> </ul> <p>Dise\u00f1ar esta estructura antes de hacer wireframes evita improvisaciones y facilita la coherencia del producto.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-de-referencia_1","title":"Recursos de referencia","text":"<ul> <li>Information Architecture Basics (NNGroup)</li> <li>Dan Brown \u2013 Seven principles of IA</li> <li>UX Collective \u2013 What is Information Architecture?</li> <li>Miro templates para IA: mapas de navegaci\u00f3n, \u00e1rboles de contenido, etc.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase_2","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cConstruye tu mapa de navegaci\u00f3n\u201d</p> <ol> <li>Cada grupo trabajar\u00e1 sobre la app que est\u00e1n dise\u00f1ando en el proyecto pr\u00e1ctico.</li> <li> <p>Deber\u00e1n elaborar un mapa de navegaci\u00f3n que incluya:</p> </li> <li> <p>Secciones principales</p> </li> <li>Subpantallas o funcionalidades internas</li> <li> <p>Relaciones entre p\u00e1ginas</p> </li> <li> <p>Usar\u00e1n papel o Figma para representarlo visualmente.</p> </li> <li> <p>Como extensi\u00f3n, deber\u00e1n justificar por escrito:</p> </li> <li> <p>Por qu\u00e9 han agrupado as\u00ed el contenido</p> </li> <li>Qu\u00e9 flujo principal sigue el usuario</li> <li>C\u00f3mo se evita que el usuario se pierda</li> </ol> <p>Esta actividad nos va a servir como paso previo obligatorio antes de crear wireframes, que ser\u00e1 el siguiente punto que veamos.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#4-wireframes-de-baja-fidelidad-pensar-con-bocetos","title":"4. Wireframes de baja fidelidad: pensar con bocetos","text":"<p>Una vez definida la estructura l\u00f3gica de la app y organizada su arquitectura de informaci\u00f3n, llega el momento de representar visualmente las pantallas. Pero a\u00fan no es momento de elegir colores, ilustraciones ni tipograf\u00edas. Lo que necesitamos ahora es probar la funcionalidad con el menor coste posible. Para eso sirven los wireframes de baja fidelidad.</p> <p>Un wireframe es un esquema visual que representa c\u00f3mo se distribuyen los elementos en una pantalla. En su versi\u00f3n de baja fidelidad, est\u00e1 despojado de detalles visuales innecesarios: no hay im\u00e1genes reales, ni sombras, ni estilos sofisticados. El foco est\u00e1 en la funcionalidad: qu\u00e9 hay en cada sitio, qu\u00e9 se puede hacer y c\u00f3mo se conecta con otras partes del sistema.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#por-que-son-tan-importantes","title":"\u00bfPor qu\u00e9 son tan importantes?","text":"<ul> <li>Fomentan la iteraci\u00f3n: como son r\u00e1pidos de hacer, podemos probar varias versiones sin miedo a equivocarnos.</li> <li>Ahorran tiempo y recursos: permiten validar ideas antes de invertir en dise\u00f1o visual o desarrollo.</li> <li>Facilitan el di\u00e1logo: ayudan a que el equipo (y los usuarios) puedan entender c\u00f3mo funcionar\u00e1 el sistema sin necesidad de explicaciones t\u00e9cnicas.</li> </ul> <p>El objetivo de esta etapa no es tener algo bonito, sino tener algo que funcione en papel.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-se-construyen","title":"\u00bfC\u00f3mo se construyen?","text":"<p>Un wireframe puede hacerse a mano, con l\u00e1piz y papel, o con herramientas digitales como Figma, Balsamiq, Whimsical o incluso PowerPoint. Lo importante es que el dise\u00f1o:</p> <ul> <li>Muestre la jerarqu\u00eda de la informaci\u00f3n.</li> <li>Incluya los elementos funcionales (botones, inputs, men\u00fas\u2026).</li> <li>Mantenga una estructura coherente con la arquitectura de informaci\u00f3n.</li> <li>Es f\u00e1cil de entender para cualquier persona, aunque no tenga estilos aplicados.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#buenas-practicas","title":"Buenas pr\u00e1cticas","text":"<ul> <li>Usa cuadrados y l\u00edneas b\u00e1sicas para representar secciones y botones.</li> <li>A\u00f1ade etiquetas y comentarios breves si alg\u00fan elemento no se entiende.</li> <li>Aseg\u00farate de que haya flujo entre pantallas (por ejemplo, del login al dashboard).</li> <li>Trabaja con plantillas reutilizables si tu app tiene estructuras repetidas.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-pantalla-de-registro-en-una-app-de-recetas","title":"Ejemplo pr\u00e1ctico: pantalla de registro en una app de recetas","text":"<p>Un wireframe de esta pantalla incluir\u00eda:</p> <ul> <li>Un t\u00edtulo principal: \u201cCrear cuenta\u201d</li> <li>Tres campos de texto: email, contrase\u00f1a, repetir contrase\u00f1a</li> <li>Un bot\u00f3n grande y claro para enviar</li> <li>Un enlace inferior: \u201c\u00bfYa tienes cuenta? Inicia sesi\u00f3n\u201d</li> <li>Nada m\u00e1s: sin logos, colores, ni im\u00e1genes decorativas</li> </ul> <p>Esto basta para probar si el flujo de registro funciona y si es comprensible.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-de-referencia_2","title":"Recursos de referencia","text":"<ul> <li>Wireframing with Figma</li> <li>Balsamiq Wireframes (gratuito con prueba)</li> <li>Mockflow</li> <li>Material Design Wireframe Kit (componentes de Google Material para wireframes)</li> <li>UXPin Guide to Wireframing</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase_3","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cBocetar antes de construir\u201d</p> <ol> <li>Cada grupo tomar\u00e1 el mapa de navegaci\u00f3n que haya creado previamente (actividad del punto 3).</li> <li>A partir de ese mapa, elaborar\u00e1 los wireframes de al menos cuatro pantallas clave de su app.</li> <li>Los wireframes podr\u00e1n hacerse:</li> <li>A mano (en hojas de trabajo proporcionadas)</li> <li>En Figma, con formas b\u00e1sicas</li> <li>Deber\u00e1n a\u00f1adir anotaciones m\u00ednimas para explicar el prop\u00f3sito funcional de cada pantalla.</li> <li>Por \u00faltimo, deber\u00e1n hacer un peque\u00f1o recorrido en clase explicando el flujo que sigue el usuario.</li> </ol> <p>Esta actividad forma parte del entregable obligatorio del proyecto pr\u00e1ctico. Servir\u00e1 como base para el prototipo navegable del punto siguiente.</p> <p>Perfecto. Aqu\u00ed tienes el punto 5 redactado con el mismo estilo, profundidad y tono que el punto 4. Lo he estructurado de forma progresiva, explicativa y con ejemplos, recursos y actividad final para clase.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#5-prototipado-navegable-lo-fi-simular-antes-de-construir","title":"5. Prototipado navegable lo-fi: simular antes de construir","text":"<p>Una vez tenemos los wireframes de baja fidelidad que representan la estructura funcional de nuestra app, el siguiente paso es hacerlos interactivos. Es decir, convertir esos bocetos est\u00e1ticos en un prototipo navegable, que permita simular c\u00f3mo ser\u00eda la experiencia real del usuario al moverse entre pantallas.</p> <p>Este tipo de prototipos no son todav\u00eda productos terminados ni tienen estilos visuales definitivos. Son maquetas funcionales que ayudan a comprobar si los flujos tienen sentido, si las acciones est\u00e1n claras y si la navegaci\u00f3n es intuitiva.</p> <p>Antes de escribir una sola l\u00ednea de c\u00f3digo, debemos tener claro que la estructura de la app funciona. Y la mejor forma de comprobarlo es naveg\u00e1ndola.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-un-prototipo-navegable","title":"\u00bfQu\u00e9 es un prototipo navegable?","text":"<p>Un prototipo navegable es una simulaci\u00f3n interactiva de una aplicaci\u00f3n o sitio web, en la que se pueden realizar acciones como hacer clic en botones, cambiar de pantalla o simular una interacci\u00f3n b\u00e1sica.</p> <p>No se trata de una app real, pero se comporta como si lo fuera, permitiendo recorrer sus pantallas como lo har\u00eda un usuario final.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#para-que-sirve-un-prototipo-navegable","title":"\u00bfPara qu\u00e9 sirve un prototipo navegable?","text":"<ul> <li>Validar la experiencia de usuario sin necesidad de desarrollo.</li> <li>Detectar errores en el flujo o confusiones en la interacci\u00f3n.</li> <li>Testear con usuarios reales o con otros grupos.</li> <li>Comunicar la propuesta de forma clara a personas no t\u00e9cnicas.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-se-construye","title":"\u00bfC\u00f3mo se construye?","text":"<p>En herramientas como Figma, el proceso es sencillo:</p> <ol> <li>Crear un archivo con los frames de cada pantalla (por ejemplo, los wireframes).</li> <li>Ir a la pesta\u00f1a Prototype y enlazar elementos interactivos:</li> <li>Botones que llevan a otras pantallas</li> <li>\u00cdconos que abren men\u00fas</li> <li>\u00c1reas clicables que simulan navegaci\u00f3n</li> <li>Ajustar transiciones, animaciones b\u00e1sicas o efectos simples si es necesario.</li> <li>Compartir el prototipo mediante un link interactivo para que otros puedan probarlo.</li> </ol>"},{"location":"orbita1.0-disenar-para-que-funcione/#buenas-practicas-para-prototipos-navegables","title":"Buenas pr\u00e1cticas para prototipos navegables","text":"<ul> <li>No a\u00f1adas estilos visuales si a\u00fan no est\u00e1n definidos: c\u00e9ntrate en la l\u00f3gica funcional.</li> <li>Usa nombres claros para las pantallas: \u201cLogin\u201d, \u201cHome\u201d, \u201cCarrito\u201d, etc.</li> <li>Aseg\u00farate de que todas las acciones posibles est\u00e9n conectadas a alg\u00fan resultado visible.</li> <li>Simula solo lo necesario para validar el flujo: menos es m\u00e1s en esta fase.</li> <li>Si algo no funciona a\u00fan, ind\u00edcalo como \u201cpantalla en desarrollo\u201d o \u201cinteracci\u00f3n no implementada\u201d.</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-app-de-recetas","title":"Ejemplo pr\u00e1ctico: app de recetas","text":"<p>Supongamos que ya tenemos wireframes para estas pantallas:</p> <ul> <li>Pantalla de inicio (buscar recetas)</li> <li>Ficha de receta</li> <li>Registro de usuario</li> <li>Crear receta</li> </ul> <p>Ahora en Figma enlazamos:</p> <ul> <li>El bot\u00f3n de \u201cBuscar\u201d lleva a una lista de resultados.</li> <li>Cada resultado lleva a la ficha de receta.</li> <li>Desde cualquier pantalla se puede ir al registro.</li> <li>El bot\u00f3n de \u201cCrear receta\u201d abre un formulario b\u00e1sico.</li> </ul> <p>El resultado es un flujo de navegaci\u00f3n funcional que podemos probar, ense\u00f1ar y corregir antes de empezar a programar.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-de-referencia_3","title":"Recursos de referencia","text":"<ul> <li>Figma: c\u00f3mo crear prototipos</li> <li>LearnUX.io \u2013 Curso b\u00e1sico de Figma</li> <li>UXPin Guide to Prototyping</li> <li>Adobe XD vs Figma para prototipos (comparativa \u00fatil)</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase_4","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cPrototipa tu idea\u201d</p> <p>Cada grupo partir\u00e1 de los wireframes creados en el punto anterior y los transformar\u00e1 en un prototipo navegable.</p> <p>Instrucciones:</p> <ol> <li>Usar\u00e1n Figma (u otra herramienta pactada) para montar sus pantallas.</li> <li>Enlazar\u00e1n botones y elementos interactivos para simular al menos dos flujos completos de usuario (por ejemplo: buscar &gt; ver &gt; a\u00f1adir, o registro &gt; login &gt; inicio).</li> <li>Compartir\u00e1n el enlace del prototipo con otros grupos.</li> <li>Cada grupo har\u00e1 una prueba cruzada: usar el prototipo de otro grupo y dejar comentarios sobre la claridad del flujo.</li> </ol> <p>Objetivo de la actividad:</p> <ul> <li>Comprobar si el dise\u00f1o funciona sin explicaciones externas.</li> <li>Detectar puntos de confusi\u00f3n o pantallas innecesarias.</li> <li>Preparar la validaci\u00f3n del dise\u00f1o antes del desarrollo.</li> </ul> <p>Este prototipo es el entregable funcional previo al desarrollo. Su validaci\u00f3n es parte del proceso iterativo del proyecto conjunto.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#6-mvp-centrarse-en-lo-esencial","title":"6. MVP: centrarse en lo esencial","text":"<p>Una vez que hemos definido la arquitectura de la informaci\u00f3n, dise\u00f1ado los wireframes y creado un prototipo navegable que represente el flujo funcional de nuestra aplicaci\u00f3n, es el momento de tomar una decisi\u00f3n estrat\u00e9gica: \u00bfqu\u00e9 funcionalidades deben implementarse primero?</p> <p>En esta etapa, entra en juego el concepto de MVP, siglas de Minimum Viable Product, que podr\u00edamos traducir como \u201cProducto M\u00ednimo Viable\u201d. Aunque proviene del mundo del desarrollo \u00e1gil y las startups, este concepto es perfectamente aplicable a proyectos educativos y de dise\u00f1o, ya que nos obliga a priorizar lo funcional frente a lo est\u00e9tico y lo imprescindible frente a lo accesorio.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-exactamente-un-mvp","title":"\u00bfQu\u00e9 es exactamente un MVP?","text":"<p>Un MVP es una versi\u00f3n funcional de una aplicaci\u00f3n que incluye solo las funcionalidades m\u00ednimas necesarias para que el usuario pueda completar su objetivo principal. No se trata de un prototipo est\u00e1tico ni de una maqueta visual, sino de una simulaci\u00f3n funcional que, aun con dise\u00f1o b\u00e1sico, permite al usuario realizar una tarea significativa.</p> <p>El prop\u00f3sito del MVP no es demostrar lo bonito que puede ser el producto final, sino validar si la soluci\u00f3n propuesta tiene sentido, si es comprensible y si realmente resuelve el problema del usuario.</p> <p>En contextos reales, lanzar un MVP permite recoger feedback temprano, corregir errores y evitar perder tiempo desarrollando funcionalidades que el usuario tal vez no necesita. En nuestro caso, nos sirve para comprobar si el dise\u00f1o funcional que hemos planificado es claro, l\u00f3gico y eficiente.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#por-que-es-tan-importante-en-el-diseno-funcional","title":"\u00bfPor qu\u00e9 es tan importante en el dise\u00f1o funcional?","text":"<p>El MVP es una herramienta poderosa para enfocar el dise\u00f1o desde la funcionalidad. Su valor reside en varios aspectos clave:</p> <ul> <li>Evita sobrecargar el dise\u00f1o y desarrollo inicial con funcionalidades que pueden esperar.</li> <li>Permite validar decisiones funcionales sin depender a\u00fan de un dise\u00f1o visual definitivo.</li> <li>Fomenta la iteraci\u00f3n basada en pruebas reales y no en suposiciones.</li> <li>Ahorra tiempo y recursos, algo especialmente \u00fatil en proyectos educativos con plazos y recursos limitados.</li> </ul> <p>Un buen MVP no es una versi\u00f3n \u201crecortada\u201d de la app final. Es una versi\u00f3n estrat\u00e9gica, pensada para cumplir el objetivo principal del usuario con la mayor claridad posible.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#como-definimos-un-mvp","title":"\u00bfC\u00f3mo definimos un MVP?","text":"<p>La clave para definir un MVP es tener claridad sobre qu\u00e9 quiere lograr el usuario y qu\u00e9 necesita como m\u00ednimo para lograrlo. Esto se puede abordar en varias fases:</p> <ol> <li> <p>Identificar el objetivo principal del usuario    Preguntarse: \u00bfQu\u00e9 tarea quiere realizar el usuario? \u00bfCu\u00e1l es el n\u00facleo de la experiencia?</p> </li> <li> <p>Dibujar el flujo m\u00ednimo funcional    \u00bfQu\u00e9 pasos necesita seguir el usuario, desde el inicio hasta lograr su objetivo? Eliminar todo lo que no sea imprescindible.</p> </li> <li> <p>Filtrar funciones secundarias    Hacer una distinci\u00f3n clara entre lo esencial (que s\u00ed entra en el MVP) y lo accesorio (que puede a\u00f1adirse m\u00e1s adelante).</p> </li> <li> <p>Validar el flujo con el usuario o con otros grupos    Comprobar si se entiende, si funciona y si permite completar la tarea sin bloqueos.</p> </li> </ol>"},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-app-de-recetas_1","title":"Ejemplo pr\u00e1ctico: app de recetas","text":"<p>Imaginemos que estamos dise\u00f1ando una app de recetas.</p> <p>Objetivo principal del usuario: encontrar una receta y leerla con claridad.</p> <p>MVP m\u00ednimo:</p> <ul> <li>Pantalla con buscador de recetas.</li> <li>Listado de resultados.</li> <li>Ficha de receta con ingredientes y pasos.</li> </ul> <p>Lo que no entra en el MVP:</p> <ul> <li>Registro de usuario.</li> <li>Subida de recetas.</li> <li>Guardar favoritas.</li> <li>Valoraciones o comentarios.</li> </ul> <p>Aunque estas funciones ser\u00e1n \u00fatiles m\u00e1s adelante, no son necesarias para que el usuario logre su objetivo principal en esta primera versi\u00f3n.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-se-entrega-como-mvp-en-esta-orbita","title":"\u00bfQu\u00e9 se entrega como MVP en esta \u00f3rbita?","text":"<p>En el proyecto pr\u00e1ctico asociado a esta \u00f3rbita, se pide al alumnado que construya y documente su MVP a trav\u00e9s de los siguientes elementos:</p> <ul> <li> <p>Mapa del flujo MVP, representado en Miro, Figma o incluso en papel digitalizado. Debe mostrar claramente los pasos que sigue el usuario.</p> </li> <li> <p>Tabla de funcionalidades, donde se especifique qu\u00e9 entra en el MVP y qu\u00e9 se pospone para futuras versiones. Esta tabla debe ir acompa\u00f1ada de una breve justificaci\u00f3n de las decisiones tomadas.</p> </li> <li> <p>Prototipo navegable en Figma del MVP. Debe incluir como m\u00ednimo tres pantallas funcionales enlazadas, que permitan simular la experiencia del usuario realizando su tarea principal.</p> </li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-recomendados-para-ampliar","title":"Recursos recomendados para ampliar","text":"<ul> <li>UX Collective \u2013 What is an MVP</li> <li>NNGroup \u2013 MVP: Minimum Viable Products</li> <li>MVP Canvas \u2013 Herramienta para definir MVPs</li> <li>UX Planet \u2013 MVP Definition and Benefits</li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase_5","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cPriorizar para construir\u201d</p> <p>Objetivo: Aprender a definir el MVP de una aplicaci\u00f3n y justificarlo desde la funcionalidad.</p> <p>Desarrollo:</p> <ol> <li>Cada grupo parte de su mapa de navegaci\u00f3n y wireframes previos.</li> <li>Identifican el objetivo principal del usuario en su app.</li> <li>Elaboran una tabla que diferencie:</li> <li>Funcionalidades esenciales (incluidas en el MVP)</li> <li>Funcionalidades complementarias (para versiones futuras)</li> <li>Representan el flujo MVP en una herramienta de su elecci\u00f3n.</li> <li>Presentan el flujo y la tabla, justificando qu\u00e9 entra y por qu\u00e9.</li> </ol> <p>Esta actividad refuerza la idea de que el dise\u00f1o no debe nacer desde la ambici\u00f3n est\u00e9tica o la acumulaci\u00f3n de ideas, sino desde una estrategia funcional clara y enfocada en el usuario.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#7-componentes-funcionales-atomic-design-construir-piezas-reutilizables","title":"7. Componentes funcionales (Atomic Design): construir piezas reutilizables","text":"<p>Una vez que tenemos claro el MVP, los flujos funcionales y los wireframes que estructuran la aplicaci\u00f3n, es el momento de identificar qu\u00e9 partes se repiten y pueden convertirse en componentes reutilizables. Este es un paso crucial en cualquier sistema de dise\u00f1o moderno, ya que permite crear una interfaz coherente, mantenible y escalable.</p> <p>Aqu\u00ed es donde entra en juego la metodolog\u00eda Atomic Design, propuesta por Brad Frost. Esta t\u00e9cnica nos ayuda a organizar los elementos de la interfaz como si fueran piezas de un sistema: desde los m\u00e1s simples a los m\u00e1s complejos, con el objetivo de que puedan reutilizarse de forma l\u00f3gica y eficiente.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#que-es-exactamente-atomic-design","title":"\u00bfQu\u00e9 es exactamente Atomic Design?","text":"<p>Atomic Design propone una jerarqu\u00eda de cinco niveles que nos permite dividir y estructurar cualquier interfaz de manera modular:</p> <ol> <li> <p>\u00c1tomos: son los elementos m\u00e1s b\u00e1sicos e indivisibles de la interfaz, como un bot\u00f3n, un campo de texto o una etiqueta.</p> </li> <li> <p>Mol\u00e9culas: combinaciones simples de \u00e1tomos que trabajan juntas para cumplir una funci\u00f3n. Un buen ejemplo ser\u00eda un formulario de b\u00fasqueda compuesto por un input y un bot\u00f3n.</p> </li> <li> <p>Organismos: conjuntos complejos y funcionales de mol\u00e9culas y \u00e1tomos. Por ejemplo, una cabecera con logo, men\u00fa de navegaci\u00f3n y buscador.</p> </li> <li> <p>Templates: estructuras de p\u00e1ginas con componentes distribuidos seg\u00fan una jerarqu\u00eda definida. Sirven de base para organizar contenido.</p> </li> <li> <p>Pages: instancias reales del dise\u00f1o con contenido definitivo, que permiten verificar c\u00f3mo se comporta todo en conjunto.</p> </li> </ol> <p>Este enfoque no s\u00f3lo aporta orden, sino que tambi\u00e9n permite detectar inconsistencias, reducir el n\u00famero de elementos redundantes y facilitar la colaboraci\u00f3n entre dise\u00f1adores y desarrolladores.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#por-que-es-util-aplicar-atomic-design-incluso-antes-de-tener-los-estilos-visuales-definidos","title":"\u00bfPor qu\u00e9 es \u00fatil aplicar Atomic Design incluso antes de tener los estilos visuales definidos?","text":"<p>Puede parecer extra\u00f1o construir una librer\u00eda de componentes sin haber definido todav\u00eda los colores, tipograf\u00edas o espaciados. Sin embargo, este enfoque funcional tiene varias ventajas:</p> <ul> <li> <p>Permite iterar antes de definir estilos, centr\u00e1ndonos en c\u00f3mo funciona la interfaz y no en c\u00f3mo se ve.</p> </li> <li> <p>Ayuda a validar interacciones y estructuras de forma r\u00e1pida, sin necesidad de cerrar detalles est\u00e9ticos.</p> </li> <li> <p>Fomenta una mentalidad de dise\u00f1o sistem\u00e1tico, que facilita el trabajo colaborativo y reduce errores futuros.</p> </li> </ul> <p>M\u00e1s adelante, cuando se definan los estilos globales (en la siguiente \u00f3rbita), bastar\u00e1 con aplicar esas decisiones al sistema ya creado, en lugar de redise\u00f1ar cada pantalla desde cero.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#construir-una-libreria-funcional-en-figma","title":"Construir una librer\u00eda funcional en Figma","text":"<p>Figma permite trabajar con componentes y variantes de forma nativa. Podemos crear, nombrar, organizar y reutilizar elementos con facilidad, agrup\u00e1ndolos seg\u00fan la jerarqu\u00eda de Atomic Design. Por ejemplo, un bot\u00f3n puede tener varias variantes: normal, con icono, desactivado\u2026</p> <p>A medida que los grupos trabajan en sus apps, pueden ir creando una p\u00e1gina de componentes dentro de su archivo. Esta p\u00e1gina servir\u00e1 como inventario funcional y como base para el dise\u00f1o visual futuro.</p> <p>Es importante que cada componente tenga un nombre claro, una funci\u00f3n definida y, si es posible, una peque\u00f1a documentaci\u00f3n de uso. Esto hace que el sistema sea comprensible para cualquiera que lo revise.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#herramientas-y-extensiones-utiles","title":"Herramientas y extensiones \u00fatiles","text":"<p>Para organizar y mantener bien estructurado el sistema de componentes en Figma, existen algunas herramientas y plugins recomendables:</p> <ul> <li> <p>Instance Finder: permite localizar todas las instancias de un componente, \u00fatil para evitar duplicidades.</p> </li> <li> <p>Design System Organizer: ayuda a categorizar los componentes y mantener una jerarqu\u00eda clara.</p> </li> <li> <p>Themer: aunque m\u00e1s avanzado, permite gestionar tokens de dise\u00f1o como colores o espaciados, incluso antes de definirlos.</p> </li> <li> <p>Styler: \u00fatil para auditar estilos y preparar la transici\u00f3n a dise\u00f1o visual.</p> </li> <li> <p>Figma Tokens: para quienes quieran trabajar con variables desde fases tempranas del proyecto.</p> </li> </ul> <p>Estos recursos no son obligatorios, pero pueden facilitar mucho la tarea de mantener un dise\u00f1o funcional coherente.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#ejemplo-practico-identificar-componentes-en-una-app-de-recetas","title":"Ejemplo pr\u00e1ctico: identificar componentes en una app de recetas","text":"<p>Supongamos que hemos dise\u00f1ado las primeras pantallas de una app de recetas. Podemos observar que hay varios elementos que se repiten: botones, campos de b\u00fasqueda, tarjetas con imagen y texto, men\u00fas flotantes\u2026</p> <p>El primer paso ser\u00eda crear un inventario con estos elementos, clasificarlos por nivel (\u00e1tomo, mol\u00e9cula, organismo) y construirlos como componentes reutilizables en Figma. Por ejemplo:</p> <ul> <li>\u00c1tomos: bot\u00f3n, campo de texto, etiqueta</li> <li>Mol\u00e9culas: buscador, tarjeta de receta</li> <li>Organismos: cabecera, listado de recetas, men\u00fa inferior</li> </ul> <p>Estos elementos se pueden usar en m\u00faltiples pantallas, garantizando coherencia funcional.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividad-practica-en-clase-construccion-del-sistema-de-componentes","title":"Actividad pr\u00e1ctica en clase: \u201cConstrucci\u00f3n del sistema de componentes\u201d","text":"<p>Cada grupo revisar\u00e1 su prototipo funcional e identificar\u00e1 al menos cinco componentes reutilizables. En una nueva p\u00e1gina de su archivo de Figma:</p> <ul> <li>Construir\u00e1n esos componentes y los clasificar\u00e1n seg\u00fan Atomic Design.</li> <li>A\u00f1adir\u00e1n etiquetas y una breve descripci\u00f3n funcional.</li> <li>Definir\u00e1n al menos una variante para cada uno (por ejemplo: activo / inactivo).</li> </ul> <p>Esta actividad no requiere todav\u00eda aplicar estilo visual. Su objetivo es estructurar la interfaz funcional como un sistema reutilizable. Adem\u00e1s, este sistema servir\u00e1 de base directa para la siguiente \u00f3rbita, donde s\u00ed aplicaremos colores, tipograf\u00edas y gu\u00edas de estilo.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#8-estudios-de-caso-y-actividades-recomendadas","title":"8. Estudios de caso y actividades recomendadas","text":"<p>Una vez que hemos recorrido todas las etapas del dise\u00f1o funcional \u2014desde la definici\u00f3n de la arquitectura hasta la creaci\u00f3n de un MVP navegable\u2014 es fundamental cerrar el proceso con una mirada cr\u00edtica y aplicada. La mejor forma de reforzar lo aprendido es analizar c\u00f3mo lo hacen otros, descomponer ejemplos reales, detectar buenas (y malas) pr\u00e1cticas, y, sobre todo, aplicar activamente lo aprendido en un entorno seguro como el aula.</p> <p>Este \u00faltimo bloque de la \u00f3rbita no introduce nuevos conceptos te\u00f3ricos, sino que se centra en afianzar conocimientos a trav\u00e9s de la observaci\u00f3n, la pr\u00e1ctica comparativa y la iteraci\u00f3n controlada.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#analizar-para-aprender-desmontar-interfaces-reales","title":"Analizar para aprender: desmontar interfaces reales","text":"<p>A menudo, los mejores aprendizajes no vienen de hacer, sino de entender c\u00f3mo est\u00e1n hechas las cosas que ya usamos cada d\u00eda. Instagram, Spotify, Airbnb, TikTok o Amazon no son productos perfectos, pero son ejemplos muy ricos desde el punto de vista de la experiencia de usuario. Est\u00e1n llenos de patrones bien aplicados, flujos funcionales bien resueltos y tambi\u00e9n \u2014en ocasiones\u2014 decisiones discutibles.</p> <p>El ejercicio consiste en mirar con ojos de dise\u00f1ador: \u00bfc\u00f3mo est\u00e1 estructurada esta pantalla?, \u00bfqu\u00e9 espera el usuario?, \u00bfd\u00f3nde se encuentran los patrones?, \u00bfd\u00f3nde aparecen antipatrones?, \u00bfes clara la arquitectura?, \u00bfhay MVP reconocible?, \u00bfqu\u00e9 elementos funcionales se repiten?</p> <p>Este tipo de an\u00e1lisis activa el pensamiento cr\u00edtico, refuerza los conceptos estudiados y ayuda a crear un lenguaje com\u00fan en el aula.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#actividades-propuestas-para-clase","title":"Actividades propuestas para clase","text":"<p>1. Web Without Words</p> <p>Utiliza webwithoutwords.com, una herramienta que elimina todo el texto de una web real y muestra solo su estructura visual. El alumnado debe:</p> <ul> <li> <p>Identificar la jerarqu\u00eda visual y funcional.</p> </li> <li> <p>Suponer qu\u00e9 contenido podr\u00eda ir en cada bloque.</p> </li> <li> <p>Justificar c\u00f3mo se gu\u00eda la atenci\u00f3n del usuario.</p> </li> </ul> <p>Este ejercicio obliga a centrarse en la estructura, no en el contenido, y demuestra la importancia del dise\u00f1o funcional.</p> <p>2. Desmontar apps</p> <p>En grupos, el alumnado elige una app conocida (como Duolingo, Netflix, Glovo o Notion) y debe:</p> <ul> <li> <p>Dibujar su mapa de navegaci\u00f3n aproximado.</p> </li> <li> <p>Identificar patrones y antipatrones.</p> </li> <li> <p>Detectar cu\u00e1l podr\u00eda ser el MVP original de esa app.</p> </li> <li> <p>Justificar decisiones funcionales observadas.</p> </li> </ul> <p>Opcionalmente, se puede proponer que esbocen una mejora de usabilidad o un redise\u00f1o de un flujo concreto.</p> <p>3. Galer\u00eda de patrones con Mobbin o UI Patterns</p> <p>Mobbin (mobbin.com) y UI Patterns (ui-patterns.com) son bibliotecas visuales con capturas de miles de apps y webs. En esta actividad:</p> <ul> <li> <p>El alumnado busca ejemplos de un patr\u00f3n funcional concreto (por ejemplo: onboarding, buscador, flujo de compra).</p> </li> <li> <p>Recopilan dos ejemplos buenos y uno malo.</p> </li> <li> <p>Explican qu\u00e9 les hace efectivos o problem\u00e1ticos.</p> </li> </ul> <p>Este ejercicio ayuda a aprender no copiando visualmente, sino comprendiendo la l\u00f3gica funcional detr\u00e1s de cada decisi\u00f3n.</p> <p>4. Revisi\u00f3n cruzada de MVPs</p> <p>Cuando cada grupo haya definido su MVP y prototipo funcional, se organiza una ronda de revisi\u00f3n cruzada. Cada grupo analiza el MVP de otro grupo, respondiendo preguntas como:</p> <ul> <li> <p>\u00bfSe entiende el flujo?</p> </li> <li> <p>\u00bfEs claro el objetivo del usuario?</p> </li> <li> <p>\u00bfFalta alguna funcionalidad esencial?</p> </li> <li> <p>\u00bfSobran pasos o hay elementos innecesarios?</p> </li> </ul> <p>El objetivo no es criticar, sino entrenar la mirada profesional para detectar problemas y mejorar el propio trabajo.</p> <p>5. Pitch funcional en clase</p> <p>Cada grupo presenta brevemente su MVP a modo de pitch, pero sin centrarse en lo visual, sino en lo funcional:</p> <ul> <li> <p>\u00bfQu\u00e9 hace su app?</p> </li> <li> <p>\u00bfQu\u00e9 funcionalidades han incluido en el MVP?</p> </li> <li> <p>\u00bfPor qu\u00e9 han decidido dejar fuera otras?</p> </li> <li> <p>\u00bfC\u00f3mo han resuelto el flujo de usuario principal?</p> </li> </ul> <p>Este ejercicio entrena la comunicaci\u00f3n t\u00e9cnica y ayuda al alumnado a defender decisiones de dise\u00f1o con criterio, no con gusto personal.</p>"},{"location":"orbita1.0-disenar-para-que-funcione/#recursos-recomendados","title":"Recursos recomendados","text":"<ul> <li> <p>PageFlows \u2013 V\u00eddeos de flujos reales de usuario en apps.</p> </li> <li> <p>UI Garage \u2013 Ejemplos visuales clasificados por componentes.</p> </li> <li> <p>Mobbin \u2013 Biblioteca visual de interfaces m\u00f3viles reales.</p> </li> <li> <p>UX Archive \u2013 Evoluci\u00f3n de flujos funcionales en apps famosas.</p> </li> <li> <p>Web Without Words \u2013 Webs sin texto para analizar estructuras.</p> </li> </ul>"},{"location":"orbita1.0-disenar-para-que-funcione/#conclusion-de-la-orbita","title":"Conclusi\u00f3n de la \u00f3rbita","text":"<p>Con este bloque de actividades se cierra la primera \u00f3rbita del curso: dise\u00f1ar para que funcione. El alumnado ha aprendido que el dise\u00f1o no empieza con colores ni logos, sino con tareas, flujos, decisiones estrat\u00e9gicas y estructuras claras. Tambi\u00e9n ha comprendido la importancia de los patrones, el valor del wireframing como herramienta de validaci\u00f3n temprana, y la necesidad de construir primero lo esencial antes de avanzar hacia lo est\u00e9tico.</p> <p>Aqu\u00ed no termina el dise\u00f1o: aqu\u00ed empieza el ciclo de mejora. A partir de ahora, entraremos en aspectos visuales, gu\u00edas de estilo, dise\u00f1o responsive, accesibilidad y usabilidad avanzada. Pero todo lo que venga tendr\u00e1 sentido solo si lo funcional ya est\u00e1 resuelto.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/","title":"\u00d3rbita 1: Dise\u00f1ar para que funcione Introducci\u00f3n","text":""},{"location":"orbita1.1-patrones-y-antipatrones/#introduccion","title":"Introducci\u00f3n","text":"<p>El dise\u00f1o de interfaces no consiste en hacer algo \"bonito\", sino en facilitar que el usuario logre sus objetivos de manera clara, r\u00e1pida y sin fricciones. Esta \u00f3rbita se centra en el dise\u00f1o funcional: en pensar primero en tareas, flujos y estructura antes de aplicar cualquier decisi\u00f3n visual.</p> <p>La interfaz es el puente entre el usuario y el sistema. Si ese puente est\u00e1 mal dise\u00f1ado, el usuario se pierde, se frustra o abandona. Por eso, antes de decidir colores o tipograf\u00edas, debemos entender para qu\u00e9 sirve la interfaz, qu\u00e9 necesita el usuario, y c\u00f3mo debe estar organizada la informaci\u00f3n.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#1-ux-primero-ui-despues-pensar-en-funcionalidad","title":"1. UX primero, UI despu\u00e9s: pensar en funcionalidad","text":"<p>En el mundo del dise\u00f1o web y de interfaces, es muy f\u00e1cil dejarse llevar por lo visual. Muchas veces empezamos un proyecto pensando en el logo, los colores corporativos o los estilos tipogr\u00e1ficos. Pero esta no es la forma m\u00e1s eficaz de construir una interfaz que realmente funcione.</p> <p>El punto de partida siempre debe ser la funcionalidad: entender al usuario, identificar qu\u00e9 tareas necesita realizar, y dise\u00f1ar una estructura que le permita lograr su objetivo sin frustraci\u00f3n. Esto es lo que diferencia una interfaz atractiva pero in\u00fatil de una interfaz efectiva.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#que-es-la-ux-y-en-que-se-diferencia-de-la-ui","title":"\u00bfQu\u00e9 es la UX y en qu\u00e9 se diferencia de la UI?","text":"<ul> <li> <p>UX (User Experience) es la experiencia completa que tiene una persona al interactuar con una app, web o sistema. Abarca desde la l\u00f3gica de navegaci\u00f3n hasta c\u00f3mo se siente al usarla: \u00bfes f\u00e1cil?, \u00bfconsigue lo que busca?, \u00bfse siente frustrado o satisfecho?</p> </li> <li> <p>UI (User Interface) es el aspecto visual de la interfaz: botones, colores, iconos, tipograf\u00eda, animaciones... Es la parte \u201cvisible\u201d, pero no debe determinar el funcionamiento, sino estar al servicio del mismo.</p> </li> </ul> <p>Pensar primero en la UX significa dise\u00f1ar desde las tareas, no desde los colores. Significa analizar qu\u00e9 necesita hacer el usuario y en qu\u00e9 orden, antes de decidir c\u00f3mo se ver\u00e1 cada pantalla.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#las-leyes-de-ux-principios-para-un-diseno-funcional","title":"Las leyes de UX: principios para un dise\u00f1o funcional","text":"<p>Los profesionales del dise\u00f1o de experiencia de usuario trabajan apoy\u00e1ndose en principios basados en la psicolog\u00eda y el comportamiento humano. Estas leyes de UX nos ayudan a dise\u00f1ar con m\u00e1s criterio. Aqu\u00ed tienes algunas fundamentales:</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#1-ley-de-hick","title":"1. Ley de Hick","text":"<p>Cuantas m\u00e1s opciones tiene una persona, m\u00e1s tarda en decidir.</p> <p>Por eso es mejor simplificar. No muestres 12 botones cuando el usuario solo necesita 3. Un men\u00fa corto es m\u00e1s efectivo que uno con 15 categor\u00edas.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#2-ley-de-fitts","title":"2. Ley de Fitts","text":"<p>El tiempo que se tarda en alcanzar un objetivo depende de su tama\u00f1o y cercan\u00eda.</p> <p>En dispositivos m\u00f3viles, los botones m\u00e1s usados deben ser grandes y estar al alcance del pulgar. No escondas funciones clave en esquinas lejanas.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#3-ley-de-jakob","title":"3. Ley de Jakob","text":"<p>Las personas esperan que tu web/app funcione como las que ya conocen.</p> <p>Esto no es malo: aprovecha los patrones familiares. Si un icono de carrito siempre est\u00e1 arriba a la derecha, no lo pongas en el pie de p\u00e1gina sin motivo.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#4-ley-de-tesler-ley-de-la-complejidad","title":"4. Ley de Tesler (Ley de la complejidad)","text":"<p>Cada sistema tiene una complejidad m\u00ednima. Si no la gestiona el dise\u00f1ador, la asume el usuario.</p> <p>Simplificar no es eliminar opciones, sino organizar bien la complejidad: agrupando, mostrando por pasos o usando asistentes.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#5-ley-de-miller","title":"5. Ley de Miller","text":"<p>El cerebro humano s\u00f3lo puede procesar entre 5 y 9 elementos a la vez.</p> <p>Si en una pantalla hay m\u00e1s de 9 cosas \u201cgritando\u201d, el usuario se bloquea. Usa jerarqu\u00eda, espacios, agrupaciones y orden l\u00f3gico.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#_1","title":"\u00d3rbita 1: Dise\u00f1ar para que funcione Introducci\u00f3n","text":""},{"location":"orbita1.1-patrones-y-antipatrones/#ejemplo-practico-app-de-comida-a-domicilio","title":"Ejemplo pr\u00e1ctico: app de comida a domicilio","text":"<p>Imaginemos que vamos a dise\u00f1ar una aplicaci\u00f3n de comida a domicilio similar a Glovo o Just Eat. En este tipo de apps, el objetivo del usuario es claro: pedir comida de forma r\u00e1pida, c\u00f3moda y segura. Pero \u00bfc\u00f3mo se traduce eso en pantallas funcionales? Para hacerlo bien, necesitamos pensar en t\u00e9rminos de experiencia de usuario y responder a una serie de preguntas clave.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#que-es-lo-primero-que-necesita-hacer-el-usuario-al-entrar","title":"\u00bfQu\u00e9 es lo primero que necesita hacer el usuario al entrar?","text":"<p>Lo m\u00e1s probable es que quiera ver qu\u00e9 restaurantes tiene disponibles cerca. Por tanto, lo primero deber\u00eda ser introducir su direcci\u00f3n o permitir la geolocalizaci\u00f3n. Si esa informaci\u00f3n ya est\u00e1 guardada, puede pasar directamente al listado de restaurantes.</p> <p>Funcionalidad recomendada: una pantalla inicial con buscador de direcci\u00f3n o bot\u00f3n de \u201cUsar mi ubicaci\u00f3n\u201d.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#debe-buscar-un-restaurante-o-iniciar-sesion","title":"\u00bfDebe buscar un restaurante, o iniciar sesi\u00f3n?","text":"<p>No deber\u00eda ser obligatorio iniciar sesi\u00f3n para navegar y explorar opciones. Obligar al registro en el primer paso genera fricci\u00f3n. Es m\u00e1s recomendable dejarlo para el momento del pedido.</p> <p>Funcionalidad recomendada: navegaci\u00f3n libre por el cat\u00e1logo; la sesi\u00f3n solo se solicita al confirmar el pedido.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#como-se-muestra-la-informacion-del-producto","title":"\u00bfC\u00f3mo se muestra la informaci\u00f3n del producto?","text":"<p>Cuando un usuario entra en un restaurante, lo que necesita ver es el men\u00fa clasificado, con nombre, descripci\u00f3n, precio, imagen opcional y un bot\u00f3n para a\u00f1adir. No conviene mostrar demasiada informaci\u00f3n en bloque. Los platos deben estar organizados en categor\u00edas (entrantes, principales, postres...).</p> <p>Funcionalidad recomendada: men\u00fa estructurado con listas claras, elementos clicables y opci\u00f3n de a\u00f1adir al carrito directamente.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#como-se-simplifica-el-proceso-de-pago","title":"\u00bfC\u00f3mo se simplifica el proceso de pago?","text":"<p>El pago debe requerir el menor n\u00famero posible de pasos. Idealmente, se resume en una pantalla clara donde se pueda revisar el pedido, a\u00f1adir direcci\u00f3n si no estaba guardada, elegir m\u00e9todo de pago y confirmar.</p> <p>Funcionalidad recomendada: pantalla de revisi\u00f3n con totales, direcci\u00f3n editable, opciones de pago guardadas o r\u00e1pidas.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#donde-puede-consultar-su-pedido-actual","title":"\u00bfD\u00f3nde puede consultar su pedido actual?","text":"<p>El usuario debe tener acceso r\u00e1pido al estado de su pedido. Lo m\u00e1s habitual es incluir un icono fijo de carrito (en la parte superior) que lleve directamente a la pantalla del pedido.</p> <p>Funcionalidad recomendada: icono de carrito visible en todo momento, con n\u00famero de productos y acceso directo al resumen.</p> <p>Este tipo de an\u00e1lisis funcional es lo que permite construir una experiencia de usuario fluida, centrada en las tareas reales del usuario. El orden de los pasos, la visibilidad de la informaci\u00f3n y la simplicidad de las acciones son aspectos que definen una buena UX.</p> <p>Una vez est\u00e9 claro qu\u00e9 pantallas necesita el usuario, qu\u00e9 datos debe ver y c\u00f3mo fluye la navegaci\u00f3n entre ellas\u2026 entonces nos preocuparemos por los colores y la tipograf\u00eda.</p> <p>En resumen, el dise\u00f1o funcional es la base de todo buen dise\u00f1o de interfaz. Una buena experiencia de usuario es lo que hace que una app sea \u00fatil, clara y agradable. La interfaz visual debe servir a esa experiencia, no sustituirla ni taparla.</p>"},{"location":"orbita1.1-patrones-y-antipatrones/#enlaces-de-referencia","title":"Enlaces de referencia","text":"<ul> <li>Laws of UX \u2013 Colecci\u00f3n completa con ejemplos visuales</li> <li>UX Planet \u2013 Diferencia entre UX y UI</li> <li>NNGroup \u2013 What is User Experience?</li> <li>UX Collective \u2013 UX antes que UI</li> </ul>"},{"location":"orbita1.1-patrones-y-antipatrones/#actividad-practica-en-clase","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cAnalizar y repensar la funcionalidad\u201d</p> <ol> <li>Divide al alumnado en peque\u00f1os grupos.</li> <li>Cada grupo elegir\u00e1 una app popular (puede ser Instagram, Amazon, Glovo, Duolingo...).</li> <li>Deben responder por escrito:</li> <li>\u00bfCu\u00e1l es el objetivo principal del usuario?</li> <li>\u00bfCu\u00e1les son los pasos que debe dar para lograrlo?</li> <li>\u00bfQu\u00e9 elementos visuales lo ayudan o lo entorpecen?</li> <li>\u00bfQu\u00e9 decisi\u00f3n de dise\u00f1o visual no tiene sentido desde el punto de vista funcional?</li> <li>Despu\u00e9s, cada grupo debe proponer una mejora funcional (no est\u00e9tica) que har\u00eda m\u00e1s f\u00e1cil o clara la experiencia del usuario.</li> </ol> <p>Esta actividad puede completarse con una puesta en com\u00fan o una presentaci\u00f3n breve por grupo.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/","title":"\u00d3rbita 1: Dise\u00f1ar para que funcione Introducci\u00f3n","text":""},{"location":"orbita1.2-arquitectura-de-la-informacion/#3-arquitectura-de-la-informacion-ordenar-para-entender","title":"3. Arquitectura de la informaci\u00f3n: ordenar para entender","text":"<p>Cuando una persona entra en una web o app, no espera tener que explorar a ciegas. Necesita encontrar lo que busca con rapidez y saber d\u00f3nde est\u00e1 en todo momento. Para que esto sea posible, el contenido debe estar bien estructurado. Esa estructura l\u00f3gica, jer\u00e1rquica y funcional es lo que llamamos arquitectura de la informaci\u00f3n (IA).</p> <p>Dise\u00f1ar una interfaz no es s\u00f3lo decidir c\u00f3mo se ve una pantalla, sino c\u00f3mo se relacionan entre s\u00ed las distintas pantallas, c\u00f3mo se agrupa el contenido y qu\u00e9 rutas puede seguir el usuario para llegar a su objetivo.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#que-es-exactamente-la-arquitectura-de-la-informacion","title":"\u00bfQu\u00e9 es exactamente la arquitectura de la informaci\u00f3n?","text":"<p>La arquitectura de la informaci\u00f3n es la disciplina que se encarga de organizar, etiquetar y jerarquizar los contenidos de un sistema para facilitar su uso y comprensi\u00f3n. Se aplica tanto a webs como a apps, e incluso a sistemas f\u00edsicos como museos o supermercados.</p> <p>En el dise\u00f1o web, la arquitectura de la informaci\u00f3n responde a preguntas como:</p> <ul> <li>\u00bfCu\u00e1ntas secciones principales hay?</li> <li>\u00bfQu\u00e9 subsecciones dependen de cada una?</li> <li>\u00bfD\u00f3nde colocamos ciertas funcionalidades o tipos de contenido?</li> <li>\u00bfQu\u00e9 estructura de navegaci\u00f3n es la m\u00e1s clara para este producto?</li> </ul> <p>Una buena arquitectura de la informaci\u00f3n no siempre se nota, pero una mala se sufre al instante: el usuario se pierde, no encuentra lo que busca o repite pasos innecesarios.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#elementos-clave-en-la-arquitectura-de-informacion","title":"Elementos clave en la arquitectura de informaci\u00f3n","text":"<p>Hay muchos recursos y t\u00e9cnicas que se usan para representar y planificar la arquitectura de la informaci\u00f3n de un producto digital. Algunos de los m\u00e1s habituales son:</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#1-mapa-de-navegacion-o-sitemap","title":"1. Mapa de navegaci\u00f3n o sitemap","text":"<p>Es un esquema que muestra c\u00f3mo se relacionan todas las pantallas o secciones. Permite ver de un vistazo la jerarqu\u00eda de contenidos. En Figma o Miro, se puede representar con cajas y l\u00edneas.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#2-agrupacion-por-categorias","title":"2. Agrupaci\u00f3n por categor\u00edas","text":"<p>El contenido debe estar organizado por bloques coherentes. Por ejemplo, en una app de viajes: \u201cvuelos\u201d, \u201choteles\u201d, \u201cactividades\u201d y \u201cmi cuenta\u201d. Si las categor\u00edas no est\u00e1n claras, el usuario se confunde.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#3-breadcrumbs-o-migas-de-pan","title":"3. Breadcrumbs o migas de pan","text":"<p>Permiten mostrar al usuario en qu\u00e9 punto exacto est\u00e1 dentro de la jerarqu\u00eda. Por ejemplo: Inicio &gt; Productos &gt; Electr\u00f3nica &gt; Port\u00e1tiles.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#4-menus-y-sistemas-de-navegacion","title":"4. Men\u00fas y sistemas de navegaci\u00f3n","text":"<p>La arquitectura tambi\u00e9n define c\u00f3mo se accede a cada secci\u00f3n: \u00bfdesde un men\u00fa lateral? \u00bfcon iconos inferiores? \u00bfmediante pesta\u00f1as?</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#principios-de-dan-brown-para-la-arquitectura-de-la-informacion","title":"Principios de Dan Brown para la Arquitectura de la Informaci\u00f3n.","text":"<p>El experto Dan Brown propuso siete principios que ayudan a construir una buena arquitectura de informaci\u00f3n:</p> <ol> <li>Objetividad: no dise\u00f1ar para nosotros, sino para el usuario.</li> <li>Organizaci\u00f3n: los elementos deben agruparse seg\u00fan su l\u00f3gica, no su est\u00e9tica.</li> <li>Navegabilidad: el usuario siempre debe saber d\u00f3nde est\u00e1 y c\u00f3mo volver.</li> <li>Contexto: cada secci\u00f3n debe tener sentido por s\u00ed misma.</li> <li>Trazabilidad: permitir al usuario seguir el rastro de su navegaci\u00f3n.</li> <li>Consistencia: usar el mismo tipo de estructura y lenguaje en todo el sistema.</li> <li>Econom\u00eda: no abrumar con opciones innecesarias; menos es m\u00e1s.</li> </ol>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#ejemplo-practico-una-app-de-gestion-de-tareas","title":"Ejemplo pr\u00e1ctico: una app de gesti\u00f3n de tareas","text":"<p>Imaginemos una app que permite al usuario crear tareas, organizarlas por proyectos y hacer seguimiento del progreso.</p> <ul> <li>Las secciones principales podr\u00edan ser: \u201cInicio\u201d, \u201cProyectos\u201d, \u201cTareas\u201d, \u201cCalendario\u201d y \u201cCuenta\u201d.</li> <li>Dentro de \u201cProyectos\u201d habr\u00eda una lista de proyectos y, al entrar en uno, las tareas correspondientes.</li> <li>La navegaci\u00f3n incluir\u00eda un men\u00fa inferior con iconos y un bot\u00f3n flotante para crear una nueva tarea desde cualquier parte.</li> <li>El usuario deber\u00eda poder ver f\u00e1cilmente en qu\u00e9 proyecto est\u00e1 y volver atr\u00e1s sin perderse.</li> </ul> <p>Dise\u00f1ar esta estructura antes de hacer wireframes evita improvisaciones y facilita la coherencia del producto.</p>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#recursos-de-referencia","title":"Recursos de referencia","text":"<ul> <li>Information Architecture Basics (NNGroup)</li> <li>Dan Brown \u2013 Seven principles of IA</li> <li>UX Collective \u2013 What is Information Architecture?</li> <li>Miro templates para IA: mapas de navegaci\u00f3n, \u00e1rboles de contenido, etc.</li> </ul>"},{"location":"orbita1.2-arquitectura-de-la-informacion/#actividad-practica-en-clase","title":"Actividad pr\u00e1ctica en clase","text":"<p>T\u00edtulo: \u201cConstruye tu mapa de navegaci\u00f3n\u201d</p> <ol> <li>Cada grupo trabajar\u00e1 sobre la app que est\u00e1n dise\u00f1ando en el proyecto pr\u00e1ctico.</li> <li> <p>Deber\u00e1n elaborar un mapa de navegaci\u00f3n que incluya:</p> </li> <li> <p>Secciones principales</p> </li> <li>Subpantallas o funcionalidades internas</li> <li> <p>Relaciones entre p\u00e1ginas</p> </li> <li> <p>Usar\u00e1n papel o Figma para representarlo visualmente.</p> </li> <li> <p>Como extensi\u00f3n, deber\u00e1n justificar por escrito:</p> </li> <li> <p>Por qu\u00e9 han agrupado as\u00ed el contenido</p> </li> <li>Qu\u00e9 flujo principal sigue el usuario</li> <li>C\u00f3mo se evita que el usuario se pierda</li> </ol> <p>Esta actividad nos va a servir como paso previo obligatorio antes de crear wireframes, que ser\u00e1 el siguiente punto que veamos.</p>"}]}